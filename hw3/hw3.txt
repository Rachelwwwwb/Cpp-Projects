Wenbei Wang
wenbeiwa@usc.edu
USCID: 3692163617
CS104 Hw3

Problem 2:
Part (a): 
enqueue 1: 	Stack 1: 1
			Stack 2: empty

enqueue 2:  Stack 1: 1 2
			Stack 2: 

dequeue: 	Since Stack 2 is empty, pop from stack 1
			Stack1.pop()
			Stack2.push(2)
			Stack1.pop()
			Stack2.push(1)

			Stack 1: empty
			Stack 2: 2 1

enqueue 3: 	Stack 1: 3
			Stack 2: 2 1

enqueue 4:  Stack 1: 3 4
			Stack 2: 2 1

dequeue:	Since Stack 2 is not empty, pop from it
			Stack 1: 3 4
			Stack 2: 1

enqueue 5:  Stack 1: 3 4 5
			Stack 2: 1

enqueue 6:	Stack 1: 3 4 5 6
			Stack 2: 1

Part (b):
Runtime for enqueue(x) is always constant, as it will always add a new element at
the end of the Stack 1, and since we don't allocate memory for stack, stack 1 will
never full.
For dequeue, the worst runtime would be 2n (n is the number of element in stack 1).
When stack 2 is empty, it will pop everything in stack 1 (n) and push everything 
into stack 2 (n), which lead to the runtime of 2n. 

Part (c):
Enqueue(x) will still take constant time.
For the dequeue function, it will pop n elements in O(n), and then push n elements
in O(1). So the total runtime will be n*n + n*1 = n^2 + n, which is O(n^2).

Problem 3:
Part (a): 
