Wenbei Wang
wenbeiwa@usc.edu
USCID: 3692163617
CS104 Hw3

Problem 2:
Part (a): 
enqueue 1: 	Stack 1: 1
			Stack 2: empty

enqueue 2:  Stack 1: 1 2
			Stack 2: 

dequeue: 	Since Stack 2 is empty, pop from stack 1
			Stack1.pop()
			Stack2.push(2)
			Stack1.pop()
			Stack2.push(1)

			Stack 1: empty
			Stack 2: 2 1

enqueue 3: 	Stack 1: 3
			Stack 2: 2 1

enqueue 4:  Stack 1: 3 4
			Stack 2: 2 1

dequeue:	Since Stack 2 is not empty, pop from it
			Stack 1: 3 4
			Stack 2: 1

enqueue 5:  Stack 1: 3 4 5
			Stack 2: 1

enqueue 6:	Stack 1: 3 4 5 6
			Stack 2: 1

Part (b):
Runtime for enqueue(x) is always constant, as it will always add a new element at
the end of the Stack 1, and since we don't allocate memory for stack, stack 1 will
never full.
For dequeue, the worst runtime would be 2n (n is the number of element in stack 1).
When stack 2 is empty, it will pop everything in stack 1 (n) and push everything 
into stack 2 (n), which lead to the runtime of 2n. 

Part (c):
Enqueue(x) will still take constant time.
For the dequeue function, it will pop n elements in O(n), and then push n elements
in O(1). So the total runtime will be n*n + n*1 = n^2 + n, which is O(n^2).

Problem 3:
Part (a): 
For the worst case, if(A[i] == 0) will always run.
The inner for loop has the runtime of Θ(log(n))
The outer for loop has the runtime of Θ(n)
So the total runtime = sigma(x=0 to n) log(n) = n*log(n), which is Θ(nlog(n)).

Part (b):
tally++ takes Θ(1).
for (int k = 1; k < n; k*=2 ) takes Θ(log(n)) time. 
So the inner for loop takes Θ(log(n)) time.

for (int j = i; j < n; j++){
	if (j % i == 0)
}
This will happen for n/i times with different i.
The outer for loop for (int i = 0; i < n; i++) will takes Θ(n) times.
So the total runtime would be sigma(x=0 to n) ((n/x)*Θ(log(n)))
= Θ(log(n)) * n * sigma(x=0 to n) (1/x) = log(n) * n * log(n) 
= Θ (n*(log(n))^2)

Part (c):
int*a = new int [10];
int size = 10;
these two lines take constant time. 
In the outer for loop, if(i == size) will execute n/10 times, when i == 10, 20, 30 , etc..
So inside the if condition, it will loop for 10 times, 20 times, 30 times, etc.
So the if statement will take the runtime of sigma(x=0 to n/10)(10x) times, 
which is (n^2+10n)/20, Θ(n^2).
For n-n/10 = 9n/10 times, the line a[i] = sqrt(i) will execute, which takes
constant times. So the bottom part will take Θ(n) times.
So the total runtime will be Θ(n^2).

Part (d):
The size starts at 10, and times 2 when it get to size, until n. So for log(n/10) times,
the if statement will run, while other (n-log(n/10)) times, the Θ(1) operation will run. 
(a[i] = sqrt(i);) Inside the for loop, it will run Θ(size) + several Θ(1) each time.
So the total runtime for the if statement would be sigma(i=0 to log(n) 10*2^n) = 10* 
((2*(logn+1)/(2-1))) = 10*Θ(2^log(n)) = 10*Θ(n) = Θ(n)
The total runtime would be Θ(n) + Θ(n-log(n/10)*Θ(1)) = Θ(n). 